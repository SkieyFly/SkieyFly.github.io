<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>bzoj3684 大朋友和多叉树</title>
      <link href="/2019/06/14/bzoj3684-%E5%A4%A7%E6%9C%8B%E5%8F%8B%E5%92%8C%E5%A4%9A%E5%8F%89%E6%A0%91/"/>
      <url>/2019/06/14/bzoj3684-%E5%A4%A7%E6%9C%8B%E5%8F%8B%E5%92%8C%E5%A4%9A%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>叶子节点权值为$1$，其它节点权值为孩子权值之和。给出根节点的权值，以及一个集合$D$，问每个点孩子个数都属于$D$有几种不同的数。</p><p>$|D|&lt;n\le 10^5$，$1\notin D$。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>显然$n$就是叶子个数，dp什么的不太好做，考虑答案的生成函数$F$。有：</p><script type="math/tex; mode=display">F=x+\sum_{i\in D}F^i(x)</script><p>为什么呢？</p><p>考虑一个$n$个叶子节点的树是怎么构成的，一个为根，枚举其孩子树，再根据几棵子树和起来的，这就是等式右边的$\sum$，单独的$x$表示一棵空树，也就是只有一个叶子节点（不用根据子树合并）。</p><p>然后我们要求$[x^n]F(x)$（$n$次项系数）。</p><p>引入<strong>拉格朗日反演</strong>：</p><p>若存在$f(x),g(x)$满足$g(f(x))=x$（多项式复合逆），则：</p><script type="math/tex; mode=display">[x^n]f(x)=\frac{1}{n}[x^{-1}]\frac{1}{g(x)^n}</script><p>当然，由于有些多项式的较低几项为$0$，普通的多项式求逆不一定存在，假设末尾有$d$个$0$，则可以把它提出来：</p><script type="math/tex; mode=display">[x^n]f(x) = \frac{1}{n}[x^{dn-1}]\left(\frac{x^d}{g(x)}\right)^n</script><p>而对于这道题，令：</p><script type="math/tex; mode=display">G(x)=x-\sum_{i\in D}x^i</script><p>就有$G(F(x))=x$。</p><p>而多项式$G$只是常数项为$0$，那么就是$d=1$，则：</p><script type="math/tex; mode=display">[x^n]F(x) = \frac{1}{n}[x^{n-1}]\left(\frac{x}{G(x)}\right)^n</script><p>实际操作就是先把$G$左移，求逆，求$ln$，乘$n$后求$exp$。</p><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>1.开始并没有理解读入为什么直接把多项式左移了。</p><p>2.注意多项式求$ln$的时候常数项要为$1$，求$exp$的时候常数项要为$0$，据说是因为$e^0=1$才收敛。</p><p>3.注意$exp$的时候最后那个<code>Q</code>数组要清空，因为回到上一层的时候求<code>Ln</code>时求导会用到<code>len</code>实际长度只有<code>ml</code>。打算以后尝试所有都在<code>ntt</code>结束后清空，防止出错。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sk() (putchar(<span class="meta-string">' '</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ek() (putchar(<span class="meta-string">'\n'</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod 950009857</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> g 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,flag=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">'-'</span>) flag=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch<span class="number">-48</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span> (x&gt;<span class="number">9</span>) Write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> inv[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (;y;(y&amp;<span class="number">1</span>)? tans=<span class="number">1l</span>l*tans*x%Mod:<span class="number">0</span>,x=<span class="number">1l</span>l*x*x%Mod,y&gt;&gt;=<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> tans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> lim,rev[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (lim=<span class="number">1</span>;lim&lt;len;lim&lt;&lt;=<span class="number">1</span>,l++);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++) rev[i]=rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>|((i&amp;<span class="number">1</span>)&lt;&lt;(l<span class="number">-1</span>)); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> P[])</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)</span><br><span class="line">  <span class="keyword">if</span> (i&lt;rev[i]) swap(P[i],P[rev[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;lim;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> tw=qp(g,(Mod<span class="number">-1</span>)/(i&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>  (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lim;j+=i&lt;&lt;<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>,t=<span class="number">1</span>;k&lt;i;k++,t=<span class="number">1l</span>l*t*tw%Mod)&#123;</span><br><span class="line">  <span class="keyword">int</span> a=P[j+k],b=<span class="number">1l</span>l*P[j+i+k]*t%Mod;</span><br><span class="line">  P[j+k]=(a+b)%Mod,P[j+i+k]=(a-b+Mod)%Mod;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Inv</span><span class="params">(<span class="keyword">int</span> P[],<span class="keyword">int</span> Q[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (len==<span class="number">1</span>)&#123;</span><br><span class="line">Q[<span class="number">0</span>]=qp(P[<span class="number">0</span>],Mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ml=(len+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Inv(P,Q,ml);</span><br><span class="line">init(<span class="number">2</span>*len<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">memset</span>(Q+ml,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(lim-ml));</span><br><span class="line"><span class="built_in">memcpy</span>(T,P,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*len);<span class="built_in">memset</span>(T+len,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(lim-len));</span><br><span class="line">ntt(Q);ntt(T);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++) Q[i]=<span class="number">1l</span>l*Q[i]*(<span class="number">2</span><span class="number">-1l</span>l*Q[i]*T[i]%Mod+Mod)%Mod;</span><br><span class="line">ntt(Q);reverse(Q+<span class="number">1</span>,Q+lim);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,inv=qp(lim,Mod<span class="number">-2</span>);i&lt;len;i++) Q[i]=<span class="number">1l</span>l*Q[i]*inv%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Der</span><span class="params">(<span class="keyword">int</span> P[],<span class="keyword">int</span> Q[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++) Q[i]=<span class="number">1l</span>l*P[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Int</span><span class="params">(<span class="keyword">int</span> P[],<span class="keyword">int</span> Q[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>  (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) Q[i+<span class="number">1</span>]=<span class="number">1l</span>l*P[i]*inv[i+<span class="number">1</span>]%Mod;</span><br><span class="line">Q[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T1[MAXN&lt;&lt;<span class="number">2</span>],T2[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ln</span><span class="params">(<span class="keyword">int</span> P[],<span class="keyword">int</span> Q[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">Der(P,T1,len);</span><br><span class="line">Inv(P,T2,len);</span><br><span class="line">init(len*<span class="number">2</span><span class="number">-2</span>);</span><br><span class="line"><span class="built_in">memset</span>(T1+len<span class="number">-1</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(lim-len+<span class="number">1</span>));</span><br><span class="line"><span class="built_in">memset</span>(T2+len,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(lim-len));</span><br><span class="line">ntt(T1);ntt(T2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++) T1[i]=<span class="number">1l</span>l*T1[i]*T2[i]%Mod;</span><br><span class="line">ntt(T1);reverse(T1+<span class="number">1</span>,T1+lim);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,inv=qp(lim,Mod<span class="number">-2</span>);i&lt;len;i++) T1[i]=<span class="number">1l</span>l*T1[i]*inv%Mod;</span><br><span class="line">Int(T1,Q,len<span class="number">-1</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> TT[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Exp</span><span class="params">(<span class="keyword">int</span> P[],<span class="keyword">int</span> Q[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (len==<span class="number">1</span>)&#123;</span><br><span class="line">Q[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ml=(len+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Exp(P,Q,ml);</span><br><span class="line">Ln(Q,TT,len);</span><br><span class="line">init(len+ml<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) TT[i]=(P[i]-TT[i]+Mod)%Mod;</span><br><span class="line">TT[<span class="number">0</span>]=(TT[<span class="number">0</span>]+<span class="number">1</span>)%Mod;</span><br><span class="line"><span class="built_in">memset</span>(Q+ml,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(lim-ml));<span class="built_in">memset</span>(TT+len,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(lim-len));</span><br><span class="line">ntt(Q);ntt(TT);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++) Q[i]=<span class="number">1l</span>l*Q[i]*TT[i]%Mod;</span><br><span class="line">ntt(Q);reverse(Q+<span class="number">1</span>,Q+lim);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,inv=qp(lim,Mod<span class="number">-2</span>);i&lt;len;i++) Q[i]=<span class="number">1l</span>l*Q[i]*inv%Mod;</span><br><span class="line"><span class="built_in">memset</span>(Q+len,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(lim-len));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这里很重要，Q超过len的要清空。</span></span><br><span class="line"><span class="comment">之前不清空是因为不会出问题（根本不会调用到）。</span></span><br><span class="line"><span class="comment">但是Ln里面求导的时候其实每次原函数的有效长度只有ml，而</span></span><br><span class="line"><span class="comment">访问到len就会出事情。</span></span><br><span class="line"><span class="comment">所以每次ntt以后把Q数组超出有效长度的部分清空。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> G[MAXN&lt;&lt;<span class="number">2</span>],GI[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> GL[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> F[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=Read();m=Read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) G[Read()<span class="number">-1</span>]=Mod<span class="number">-1</span>;</span><br><span class="line">G[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//读进来就移好 </span></span><br><span class="line">inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) inv[i]=(Mod<span class="number">-1l</span>l*(Mod/i)*inv[Mod%i]%Mod)%Mod;</span><br><span class="line">Inv(G,GI,n);</span><br><span class="line">Ln(GI,GL,n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) GL[i]=<span class="number">1l</span>l*GL[i]*n%Mod;</span><br><span class="line">GL[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">Exp(GL,F,n);</span><br><span class="line">Write(<span class="number">1l</span>l*qp(n,Mod<span class="number">-2</span>)*F[n<span class="number">-1</span>]%Mod);ek();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cf547D Mike and Fish</title>
      <link href="/2019/06/12/cf547D-Mike-and-Fish/"/>
      <url>/2019/06/12/cf547D-Mike-and-Fish/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>坐标系上有$n$个点，要求红蓝染色，使每一行每一列红的和蓝的相差不超过$1$。</p><p>$n\le 2\times 10^5$，$1\le x_i,y_i\le 2\times 10^5$。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>根据套路，每个点就是一个二分图的连边。</p><p>假设题目是要求红蓝都相等，考虑这是在干嘛。</p><p>对于连结$u$的所有边，对其定向，如果是入边染红，出边染蓝。那么要求所有点红蓝数量相同，也就是入度等于出度——欧拉回路。</p><a id="more"></a><p>也就是说我们跑一遍欧拉回路，就是在定向，也就是确定了每个点是红是蓝。</p><p>再考虑至多相差$1$，就是欧拉回路在有奇点的情况下无解，所以可以加边再跑，最后不用管新加的边。</p><p>连边就把奇点两两配对（由于度数和$=2e$，所以奇点也是偶数个）。</p><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>1.图依旧可能不连通</p><p>2.跑欧拉回路一旦遍历完要马上删掉，不然复杂度是错的。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sk() (putchar(<span class="meta-string">' '</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ek() (putchar(<span class="meta-string">'\n'</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 400005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Lim 400000</span></span><br><span class="line"><span class="comment">//注意点数 </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,flag=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">'-'</span>) flag=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch<span class="number">-48</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Write</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span> (x&gt;<span class="number">9</span>) Write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> deg[MAX];</span><br><span class="line"><span class="keyword">int</span> odd[MAX];</span><br><span class="line"><span class="keyword">int</span> edgenum,Edge[MAX&lt;&lt;<span class="number">1</span>],head[MAX],nxt[MAX&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">Edge[++edgenum]=y;</span><br><span class="line">nxt[edgenum]=head[x];</span><br><span class="line">head[x]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[MAX],ans[MAX];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Euler</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=head[now];i;i=head[now])&#123;</span><br><span class="line">head[now]=nxt[i];</span><br><span class="line"><span class="comment">//在这里删，不能在递归后再删 </span></span><br><span class="line"><span class="keyword">if</span> (vis[id(i)]) <span class="keyword">continue</span>;</span><br><span class="line">vis[id(i)]=<span class="number">1</span>;</span><br><span class="line">Euler(Edge[i]);</span><br><span class="line">ans[id(i)]=i&amp;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=Read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x=Read(),y=Read();</span><br><span class="line">addedge(x,y+Lim/<span class="number">2</span>);addedge(y+Lim/<span class="number">2</span>,x);</span><br><span class="line">deg[x]++;deg[y+Lim/<span class="number">2</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Lim;i++)</span><br><span class="line">  <span class="keyword">if</span> (deg[i]&amp;<span class="number">1</span>) odd[++cnt]=i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt/<span class="number">2</span>;i++)</span><br><span class="line">  addedge(odd[i*<span class="number">2</span><span class="number">-1</span>],odd[i*<span class="number">2</span>]),addedge(odd[i*<span class="number">2</span>],odd[i*<span class="number">2</span><span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Lim;i++) Euler(i);</span><br><span class="line"><span class="comment">//图可能不连通 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  <span class="built_in">putchar</span>((ans[i])? <span class="string">'r'</span>:<span class="string">'b'</span>);</span><br><span class="line">ek();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cf843D Dynamic Shortest Path</title>
      <link href="/2019/06/10/cf843D-Dynamic-Shortest-Path/"/>
      <url>/2019/06/10/cf843D-Dynamic-Shortest-Path/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一张$n$点$m$边的有向带非负权图，共$q$个操作，支持以下两种：</p><ul><li><p>问$1$到$v$的最短路。</p></li><li><p>对于一些边边权$+1$。</p></li></ul><p>$n,m\le 10^5$，$q\le 2000$。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>每次跑dijkstra肯定不行。</p><p>有一种$O(m+w)$的最短路跑法，$w$是最短路长度。就是dijkstra的时候开个桶（<code>vector</code>）存放每种距离的点进行转移。</p><p>由于这题修改边权只会$+1$，所以改变量并不是很大，因此考虑如何将上述算法加入。</p><a id="more"></a><p>对于一个有负权的图dijkstra是跑不了的，所以有一种方法是改变边权：</p><script type="math/tex; mode=display">w(u,v)\rightarrow w(u,v)+h(u)-h(v)</script><p>这种改法最后会使得：</p><script type="math/tex; mode=display">dis(u,v)\rightarrow dis(u,v)+h(u)-h(v)</script><p>因此不影响最短路。</p><p>那么就要如何给点加权，其实点权就是源点到该点的最短路，因为最短路的三角不等式：</p><script type="math/tex; mode=display">dis(v)\le dis(u)+w(u,v)</script><p>所以可以先用别的最短路求一遍，然后边权就非负了，就能用dijkstra跑任意两点的最短路了。</p><p>然后这道题是用了还有一个好处，改完边权后，每个点到源点的最短路就是$0$。</p><p>因此此题修改边权的时候，最后的最短路也不会超过$n$，就可以用$O(m+w)$的那个算法啦。每次用完后再改边权即可。</p><p>时间复杂度$O(n\log n+qm)$。</p><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>无</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sk() (putchar(<span class="meta-string">' '</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ek() (putchar(<span class="meta-string">'\n'</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,flag=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">'-'</span>) flag=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch<span class="number">-48</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Write</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span> (x&gt;<span class="number">9</span>) Write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> edgenum,Edge[MAX],head[MAX],nxt[MAX];</span><br><span class="line">LL W[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">Edge[++edgenum]=y;</span><br><span class="line">W[edgenum]=w;</span><br><span class="line">nxt[edgenum]=head[x];</span><br><span class="line">head[x]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">LL d;</span><br><span class="line">Node(<span class="keyword">int</span> xx=<span class="number">0</span>,LL dd=<span class="number">0</span>)&#123;</span><br><span class="line">x=xx;d=dd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Node x,Node y)&#123;</span><br><span class="line"><span class="keyword">return</span> x.d&gt;y.d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;Node&gt; q;</span><br><span class="line">LL Dis[MAX];</span><br><span class="line"><span class="keyword">bool</span> vis[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dij</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Dis[i]=INF;</span><br><span class="line">q.push(Node(<span class="number">1</span>,Dis[<span class="number">1</span>]=<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">Node x=q.top();q.pop();</span><br><span class="line"><span class="keyword">if</span> (vis[x.x]) <span class="keyword">continue</span>;</span><br><span class="line">vis[x.x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=head[x.x];i;i=nxt[i])&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=Edge[i];</span><br><span class="line"><span class="keyword">if</span> (x.d+W[i]&lt;Dis[tmp])&#123;</span><br><span class="line">Dis[tmp]=x.d+W[i];</span><br><span class="line">q.push(Node(tmp,Dis[tmp]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LL dis[MAX];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; buck[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">(<span class="keyword">int</span> lim)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dis[i]=INF,vis[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> now;</span><br><span class="line">buck[dis[<span class="number">1</span>]=now=<span class="number">0</span>].push_back(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (now&lt;=lim)&#123;</span><br><span class="line"><span class="keyword">if</span> (!buck[now].size())&#123;</span><br><span class="line">now++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x=buck[now].back();buck[now].pop_back();</span><br><span class="line"><span class="keyword">if</span> (vis[x]) <span class="keyword">continue</span>;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=head[x];i;i=nxt[i])&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=Edge[i];</span><br><span class="line"><span class="keyword">if</span> (now+W[i]&lt;dis[tmp])&#123;</span><br><span class="line">dis[tmp]=now+W[i];</span><br><span class="line"><span class="keyword">if</span> (dis[tmp]&lt;=lim) buck[dis[tmp]].push_back(tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j=head[i];j;j=nxt[j])</span><br><span class="line">    W[j]=W[j]+dis[i]-dis[Edge[j]];</span><br><span class="line"><span class="comment">//每次改边权 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Dis[i]=min(Dis[i]+dis[i],(LL)INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=Read(),m=Read(),k=Read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x=Read(),y=Read(),w=Read();</span><br><span class="line">addedge(x,y,w);</span><br><span class="line">&#125;</span><br><span class="line">Dij();</span><br><span class="line"><span class="comment">//先跑一遍Dij </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j=head[i];j;j=nxt[j])</span><br><span class="line">    W[j]=W[j]+Dis[i]-Dis[Edge[j]];</span><br><span class="line"><span class="keyword">while</span> (k--)&#123;</span><br><span class="line"><span class="keyword">int</span> op=Read();</span><br><span class="line"><span class="keyword">if</span> (op==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> x=Read();</span><br><span class="line">Write((Dis[x]&gt;=INF)? <span class="number">-1</span>:Dis[x]);ek();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> c=Read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c;i++) W[Read()]++;</span><br><span class="line">dij(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>luogu1954 [NOI2010]航空管制</title>
      <link href="/2019/06/09/luogu1954-NOI2010-%E8%88%AA%E7%A9%BA%E7%AE%A1%E5%88%B6/"/>
      <url>/2019/06/09/luogu1954-NOI2010-%E8%88%AA%E7%A9%BA%E7%AE%A1%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定$n$个飞机起飞的最晚序号以及$m$个$a$要在$b$前飞的限制，给出一可行次序（保证有解）以及每个飞机最早起飞的序号（每个时刻只能飞一个）。</p><p>$n\le 2000$，$m\le 10^4$。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>有一个套路，求最前的拓扑序比较难，所以建反图，求每个点最晚在什么时候拓扑到。</p><p>这就很方便了。</p><p>对于每个点求最晚，弹的时候，如果除它以外别的还能弹就弹（队列用优先队列，按照反过来后最早时间排，贪心思路）。</p><a id="more"></a><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>1.luogu貌似有点卡常，开了<code>O2</code>能过，不开过不了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sk() (putchar(<span class="meta-string">' '</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ek() (putchar(<span class="meta-string">'\n'</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,flag=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">'-'</span>) flag=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch<span class="number">-48</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span> (x&gt;<span class="number">9</span>) Write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> edgenum,Edge[MAX&lt;&lt;<span class="number">1</span>],head[MAX],nxt[MAX&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">Edge[++edgenum]=y;</span><br><span class="line">nxt[edgenum]=head[x];</span><br><span class="line">head[x]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ddl[MAX];</span><br><span class="line"><span class="keyword">int</span> cdeg[MAX],deg[MAX];</span><br><span class="line"><span class="keyword">int</span> ans[MAX];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,ddl;</span><br><span class="line">Node(<span class="keyword">int</span> xx=<span class="number">0</span>,<span class="keyword">int</span> dd=<span class="number">0</span>)&#123;</span><br><span class="line">x=xx;ddl=dd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Node x,Node y)&#123;</span><br><span class="line"><span class="keyword">return</span> x.ddl&gt;y.ddl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;Node&gt; q;</span><br><span class="line"><span class="keyword">int</span> ord[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sol</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) deg[i]=cdeg[i];</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  <span class="keyword">if</span> (!deg[i]) q.push(Node(i,ddl[i]));</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">Node x=q.top();q.pop();</span><br><span class="line">ord[++t]=x.x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=head[x.x];i;i=nxt[i])&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=Edge[i];</span><br><span class="line"><span class="keyword">if</span> (!--deg[tmp]) q.push(Node(tmp,ddl[tmp]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i--)</span><br><span class="line">  Write(ord[i]),(i==<span class="number">1</span>)? ek():sk();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) deg[i]=cdeg[i];</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  <span class="keyword">if</span> (!deg[i]) q.push(Node(i,ddl[i]));</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">Node x=q.top();q.pop();</span><br><span class="line"><span class="keyword">if</span> (x.x==s) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//先不弹 </span></span><br><span class="line"><span class="keyword">if</span> (x.ddl&gt;t+<span class="number">1</span>)&#123;</span><br><span class="line">ans[s]=n-t;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果实在没办法，别的点太早弹了，那只能弹s </span></span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=head[x.x];i;i=nxt[i])&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=Edge[i];</span><br><span class="line"><span class="keyword">if</span> (!--deg[tmp]) q.push(Node(tmp,ddl[tmp]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans[s]=n-t;</span><br><span class="line"><span class="comment">//或者不弹s就没点，队列就空了 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=Read(),m=Read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ddl[i]=n-Read()+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x=Read(),y=Read();</span><br><span class="line">addedge(y,x);cdeg[x]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反转 </span></span><br><span class="line">Sol();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) work(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  Write(ans[i]),(i==n)? ek():sk();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hdu5215 Cycle</title>
      <link href="/2019/06/09/hdu5215-Cycle/"/>
      <url>/2019/06/09/hdu5215-Cycle/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一张$n$点$m$边的无向图，问是否存在奇环和偶环。</p><p>$n\le 10^5$，$m\le 3\times 10^5$，$T\le 30$。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>是否有奇环就判是不是二分图（没有奇环肯定可以黑白染色，不能黑白染色就有奇环）。</p><p>对于偶环，仍旧考虑dfs树和非树边，如果找到偶环就找到了，否则看奇环是否有交（这题中注意环可以经过重复点，所以是点覆盖不是边），有交的话，把公共部分去掉就是偶环了。</p><a id="more"></a><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>1.注意是点覆盖不是边覆盖。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sk() (putchar(<span class="meta-string">' '</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ek() (putchar(<span class="meta-string">'\n'</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 300005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,flag=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">'-'</span>) flag=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch<span class="number">-48</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span> (x&gt;<span class="number">9</span>) Write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> edgenum,Edge[MAX&lt;&lt;<span class="number">1</span>],head[MAX],nxt[MAX&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">Edge[++edgenum]=y;</span><br><span class="line">nxt[edgenum]=head[x];</span><br><span class="line">head[x]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> odd&#123;</span><br><span class="line"><span class="keyword">int</span> col[MAX];</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=head[now];i;i=nxt[i])&#123;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> tmp=Edge[i];</span><br><span class="line"><span class="keyword">if</span> (tmp==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (~col[tmp])&#123;</span><br><span class="line"><span class="keyword">if</span> (col[tmp]==col[now])&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">col[tmp]=col[now]^<span class="number">1</span>;</span><br><span class="line">dfs(tmp,now);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(col,<span class="number">-1</span>,<span class="keyword">sizeof</span>(col));</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  <span class="keyword">if</span> (col[i]==<span class="number">-1</span>)&#123;</span><br><span class="line">  dfs(i,col[i]=<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> even&#123;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="keyword">bool</span> vis[MAX&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">bool</span> cover[MAX];</span><br><span class="line"><span class="keyword">int</span> father[MAX],dep[MAX];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">anti</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((x<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line">dep[now]=dep[fa]+<span class="number">1</span>;father[now]=fa;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=head[now];i;i=nxt[i])&#123;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">vis[i]=vis[anti(i)]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> tmp=Edge[i];</span><br><span class="line"><span class="keyword">if</span> (!dep[tmp]) dfs(tmp,now);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((dep[now]-dep[tmp])&amp;<span class="number">1</span>)&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x=now;</span><br><span class="line"><span class="keyword">while</span> (x!=father[tmp])&#123; <span class="comment">//要把终点也盖了 </span></span><br><span class="line"><span class="keyword">if</span> (cover[x])&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">cover[x]=<span class="number">1</span>;</span><br><span class="line">x=father[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(dep,<span class="number">0</span>,<span class="keyword">sizeof</span>(dep));</span><br><span class="line"><span class="built_in">memset</span>(cover,<span class="number">0</span>,<span class="keyword">sizeof</span>(cover));</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  <span class="keyword">if</span> (!dep[i])&#123;</span><br><span class="line">  dep[i]=<span class="number">1</span>;</span><br><span class="line">dfs(i,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (flag)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=Read(),m=Read();</span><br><span class="line">edgenum=<span class="number">0</span>;<span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x=Read(),y=Read();</span><br><span class="line">addedge(x,y);addedge(y,x);</span><br><span class="line">&#125;</span><br><span class="line">odd::work();</span><br><span class="line">even::work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T=Read();</span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line">  solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cf521E Cycling City</title>
      <link href="/2019/06/09/cf521E-Cycling-City/"/>
      <url>/2019/06/09/cf521E-Cycling-City/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一张$n$点$m$边的无向图（无重边无自环），问是否有一对起点和出发点，存在三条在中途不交的简单路径，并给出方案。</p><p>$n,m\le 2\times 10^5$。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>如果图是个仙人掌（不存在一条边在两个简单环中），那么不存在，否则是存在的。</p><p>因为无向图环的特殊性（一条非树边和树链构成），所以画个图，考虑两个相交的环，公共部分链的端点就可以是起点终点。那么也易知可以得到三条路径。</p><p>非树边覆盖的时候暴力覆盖是对的，因为每条边至多盖$1$次（否则就找到公共部分了）。</p><a id="more"></a><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>1.图可能不连通，所以每个连通块都要。</p><p>2.一开始求路径没想清楚。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sk() (putchar(<span class="meta-string">' '</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ek() (putchar(<span class="meta-string">'\n'</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,flag=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">'-'</span>) flag=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch<span class="number">-48</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span> (x&gt;<span class="number">9</span>) Write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> edgenum,Edge[MAX&lt;&lt;<span class="number">1</span>],head[MAX],nxt[MAX&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">Edge[++edgenum]=y;</span><br><span class="line">nxt[edgenum]=head[x];</span><br><span class="line">head[x]=edgenum;</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cover[MAX];</span><br><span class="line"><span class="keyword">int</span> father[MAX],dep[MAX];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addpath</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">bool</span> tag,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; t;t.clear();</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (dep[x]&lt;dep[y]) swap(x,y),flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (tag) t.push_back(x),t.push_back(y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">while</span> (x!=father[y]) t.push_back(x),x=father[x];</span><br><span class="line"><span class="keyword">if</span> (flag) reverse(t.begin(),t.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,sz=t.size();i&lt;sz<span class="number">-1</span>;i++)</span><br><span class="line">  p[id].push_back(t[i]);</span><br><span class="line"><span class="comment">//这里加路径不加最后一个点，因为后面方便 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> d1,<span class="keyword">int</span> u1,<span class="keyword">int</span> d2,<span class="keyword">int</span> u2,<span class="keyword">int</span> st)</span></span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">int</span> ed=(dep[u1]&gt;dep[u2])? u1:u2;</span><br><span class="line"><span class="comment">//找到交，确定路径起始点 </span></span><br><span class="line">addpath(<span class="number">0</span>,<span class="number">0</span>,st,ed);</span><br><span class="line">addpath(<span class="number">1</span>,<span class="number">0</span>,st,d1);addpath(<span class="number">1</span>,<span class="number">1</span>,d1,u1);addpath(<span class="number">1</span>,<span class="number">0</span>,u1,ed);</span><br><span class="line">addpath(<span class="number">2</span>,<span class="number">0</span>,st,d2);addpath(<span class="number">2</span>,<span class="number">1</span>,d2,u2);addpath(<span class="number">2</span>,<span class="number">0</span>,u2,ed);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) p[i].push_back(ed);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> sz=p[i].size();</span><br><span class="line">Write(sz);sk();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;sz;j++)</span><br><span class="line">  Write(p[i][j]),(j==sz<span class="number">-1</span>)? ek():sk();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[MAX&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">anti</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((x<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">dep[now]=dep[fa]+<span class="number">1</span>;father[now]=fa;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=head[now];i;i=nxt[i])&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">vis[i]=vis[anti(i)]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> tmp=Edge[i];</span><br><span class="line"><span class="keyword">if</span> (!dep[tmp]) dfs(tmp,now);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=now;</span><br><span class="line"><span class="keyword">while</span> (x!=tmp)&#123;</span><br><span class="line"><span class="keyword">if</span> (cover[x].first)</span><br><span class="line">  work(now,tmp,cover[x].first,cover[x].second,x);</span><br><span class="line">cover[x]=make_pair(now,tmp);</span><br><span class="line"><span class="comment">//记录非树边的起点和终点 </span></span><br><span class="line">x=father[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=Read(),m=Read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x=Read(),y=Read();</span><br><span class="line">addedge(x,y);addedge(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">  <span class="keyword">if</span> (!dep[i])&#123;</span><br><span class="line">  dep[i]=<span class="number">1</span>;</span><br><span class="line">  dfs(i,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hdu6051 If the starlight never fade</title>
      <link href="/2019/06/09/hdu6051-If-the-starlight-never-fade/"/>
      <url>/2019/06/09/hdu6051-If-the-starlight-never-fade/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定$n,p$，定义$f(i)$为满足$(x+y)^i\equiv x^i\bmod p$且$y\le n$的$(x,y)$的数量，求：</p><script type="math/tex; mode=display">\sum_{i=1}^{p-1}i\times f(i)</script><p>$n\le p\le 10^9+7$。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由于是质数，所以考虑用原根代换。令$x=g^a,y=g^b$，那么：</p><script type="math/tex; mode=display">(g^a+g^b)^i=g^{ai}\Rightarrow (1+g^{b-a})^i=1</script><p>令$g^k=1+g^{b-a}$，有$g^{ki}=1$，所以$ki\equiv 0\bmod (p-1)$，因此对于每个$i$，$k$一定是$\frac{p-1}{\gcd(i,p-1)}$的倍数，感性理解就是$k$至少应该包含$(p-1)$与$i$取$\gcd$后剩下的那些因数，继而这样的$k$有$\gcd(i-1,p-1)$个。</p><a id="more"></a><p>注：这也是$x^k\equiv 1\bmod p$有$\gcd(k,p-1)$个解的证明。</p><p>而容易知道$g^k=1+g^{b-a}&gt;1$，所以要$k&gt;0$，因此严格来说是$\gcd(i,p-1)-1$个解，这样的话确定每个$k$和$y$就有一个$x$对应，所以对于一个$y$就有$\gcd(i,p-1)-1$个$x$，因此最后就是计算：</p><script type="math/tex; mode=display">m\times \sum_{i=1}^{p-1}\gcd(i,p-1)-1=m\times \left(\sum_{i=1}^{p-1}\gcd(i,p-1)-\frac{p(p-1)}{2}\right)</script><p>重点就是$\gcd$的求和：</p><script type="math/tex; mode=display">\sum_{i=1}^{p-1}\gcd(i,p-1)=\sum_{d}d\sum_{i,d|i}i\times [\gcd(i,d)=1]=\sum d^2\sum_{i=1}^{\lfloor\frac{p-1}{d}\rfloor}i\times \left[\gcd\left(\lfloor\frac{p-1}{d}\rfloor,i\right)=1\right]</script><p>令$a=\lfloor\frac{p-1}{d}\rfloor$，一个数$x$与$a$互质，则$a-x$也与$a$互质，所以：</p><script type="math/tex; mode=display">\sum_{i=1}^{a}i\times \gcd(i,a)=\frac{a\times \varphi(a)+[a=1]}{2}</script><p>然后枚举约数即可。</p><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>1.算$\varphi$的时候，由于$x$要一边除，原先<code>prime[i]&lt;=x/prime[i]</code>忘备份了。</p><p>2.算$\varphi$的时候最后判的是<code>x&gt;1</code>而不是<code>x&gt;0</code>。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sk() (putchar(<span class="meta-string">' '</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ek() (putchar(<span class="meta-string">'\n'</span>))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXNUM 2000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,flag=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">'-'</span>) flag=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch<span class="number">-48</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>) x=-x,<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">if</span> (x&gt;<span class="number">9</span>) Write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> primenum,prime[MAXNUM+<span class="number">50</span>],phi[MAXNUM+<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=MAXNUM;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (!phi[i]) prime[++primenum]=i,phi[i]=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=primenum&amp;&amp;prime[j]&lt;=MAXNUM/i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (i%prime[j]==<span class="number">0</span>)&#123;</span><br><span class="line">phi[i*prime[j]]=phi[i]*prime[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">phi[i*prime[j]]=phi[i]*(prime[j]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> p,_p,n,cnt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;=MAXNUM) <span class="keyword">return</span> phi[x];</span><br><span class="line"><span class="keyword">int</span> tans=x,cx=x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;prime[i]&lt;=cx/prime[i];i++)</span><br><span class="line">  <span class="keyword">if</span> (x%prime[i]==<span class="number">0</span>)&#123;</span><br><span class="line">  <span class="keyword">while</span> (x%prime[i]==<span class="number">0</span>) x/=prime[i];</span><br><span class="line">  tans=tans/prime[i]*(prime[i]<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">if</span> (x&gt;<span class="number">1</span>) tans=tans/x*(x<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> tans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=Read(),_p=(p=Read())<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d=<span class="number">1</span>;d&lt;=_p/d;d++)</span><br><span class="line">  <span class="keyword">if</span> (_p%d==<span class="number">0</span>)&#123;</span><br><span class="line">  <span class="keyword">int</span> _d=_p/d;</span><br><span class="line">  ans=(ans+<span class="number">1l</span>l*d*d%Mod*((<span class="number">1l</span>l*_d*get(_d)+(_d==<span class="number">1</span>))/<span class="number">2</span>%Mod)%Mod)%Mod;</span><br><span class="line">  <span class="keyword">if</span> (_p/d!=d)</span><br><span class="line">    ans=(ans+<span class="number">1l</span>l*_d*_d%Mod*((<span class="number">1l</span>l*d*get(d)+(d==<span class="number">1</span>))/<span class="number">2</span>%Mod)%Mod)%Mod;</span><br><span class="line">  &#125;</span><br><span class="line">ans=(<span class="number">1l</span>l*n*ans%Mod<span class="number">-1l</span>l*n*(<span class="number">1l</span>l*p*_p/<span class="number">2</span>%Mod)%Mod+Mod)%Mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>,++cnt,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T=Read();</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line">  solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/06/07/hello-world/"/>
      <url>/2019/06/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
